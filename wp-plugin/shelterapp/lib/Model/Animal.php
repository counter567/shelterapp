<?php
/**
 * Animal
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * shelterapp-backend API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Animal Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Animal implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Animal';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'date_of_birth' => '\DateTime',
        'date_of_admission' => '\DateTime',
        'type' => 'string',
        'breed_one' => 'string',
        'breed_two' => 'string',
        'sex' => '\OpenAPI\Client\Model\AnimalSex',
        'color' => 'string',
        'main_picture_file_url' => 'string',
        'other_picture_file_urls' => 'string[]',
        'weight' => 'float',
        'height_at_withers' => 'int',
        'circumference_of_neck' => 'int',
        'length_of_back' => 'int',
        'circumference_of_chest' => 'int',
        'is_castrated' => 'bool',
        'blood_type' => 'string',
        'illnesses' => 'string[]',
        'allergies' => 'string[]',
        'procedures' => '\OpenAPI\Client\Model\AnimalProcedure[]',
        'chip_number' => 'string',
        'is_public' => 'bool',
        'status' => '\OpenAPI\Client\Model\AnimalStatus',
        'was_found' => 'bool',
        'is_success_story' => 'bool',
        'is_missing' => 'bool',
        'is_private_adoption' => 'bool',
        'notes' => 'string',
        'description' => 'string',
        'donation_call' => 'bool',
        'internal_notes' => 'string',
        'date_of_leave' => '\DateTime',
        'date_of_death' => '\DateTime',
        'castrated' => 'bool',
        'public' => 'bool',
        'success_story' => 'bool',
        'missing' => 'bool',
        'private_adoption' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'name' => null,
        'date_of_birth' => 'date',
        'date_of_admission' => 'date',
        'type' => null,
        'breed_one' => null,
        'breed_two' => null,
        'sex' => null,
        'color' => null,
        'main_picture_file_url' => null,
        'other_picture_file_urls' => null,
        'weight' => 'float',
        'height_at_withers' => 'int32',
        'circumference_of_neck' => 'int32',
        'length_of_back' => 'int32',
        'circumference_of_chest' => 'int32',
        'is_castrated' => null,
        'blood_type' => null,
        'illnesses' => null,
        'allergies' => null,
        'procedures' => null,
        'chip_number' => null,
        'is_public' => null,
        'status' => null,
        'was_found' => null,
        'is_success_story' => null,
        'is_missing' => null,
        'is_private_adoption' => null,
        'notes' => null,
        'description' => null,
        'donation_call' => null,
        'internal_notes' => null,
        'date_of_leave' => 'date',
        'date_of_death' => 'date',
        'castrated' => null,
        'public' => null,
        'success_story' => null,
        'missing' => null,
        'private_adoption' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'date_of_birth' => true,
        'date_of_admission' => false,
        'type' => false,
        'breed_one' => false,
        'breed_two' => true,
        'sex' => false,
        'color' => true,
        'main_picture_file_url' => true,
        'other_picture_file_urls' => true,
        'weight' => true,
        'height_at_withers' => true,
        'circumference_of_neck' => true,
        'length_of_back' => true,
        'circumference_of_chest' => true,
        'is_castrated' => true,
        'blood_type' => true,
        'illnesses' => true,
        'allergies' => true,
        'procedures' => true,
        'chip_number' => true,
        'is_public' => false,
        'status' => false,
        'was_found' => true,
        'is_success_story' => false,
        'is_missing' => false,
        'is_private_adoption' => false,
        'notes' => true,
        'description' => true,
        'donation_call' => false,
        'internal_notes' => true,
        'date_of_leave' => true,
        'date_of_death' => true,
        'castrated' => true,
        'public' => false,
        'success_story' => false,
        'missing' => false,
        'private_adoption' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'date_of_birth' => 'dateOfBirth',
        'date_of_admission' => 'dateOfAdmission',
        'type' => 'type',
        'breed_one' => 'breedOne',
        'breed_two' => 'breedTwo',
        'sex' => 'sex',
        'color' => 'color',
        'main_picture_file_url' => 'mainPictureFileUrl',
        'other_picture_file_urls' => 'otherPictureFileUrls',
        'weight' => 'weight',
        'height_at_withers' => 'heightAtWithers',
        'circumference_of_neck' => 'circumferenceOfNeck',
        'length_of_back' => 'lengthOfBack',
        'circumference_of_chest' => 'circumferenceOfChest',
        'is_castrated' => 'isCastrated',
        'blood_type' => 'bloodType',
        'illnesses' => 'illnesses',
        'allergies' => 'allergies',
        'procedures' => 'procedures',
        'chip_number' => 'chipNumber',
        'is_public' => 'isPublic',
        'status' => 'status',
        'was_found' => 'wasFound',
        'is_success_story' => 'isSuccessStory',
        'is_missing' => 'isMissing',
        'is_private_adoption' => 'isPrivateAdoption',
        'notes' => 'notes',
        'description' => 'description',
        'donation_call' => 'donationCall',
        'internal_notes' => 'internalNotes',
        'date_of_leave' => 'dateOfLeave',
        'date_of_death' => 'dateOfDeath',
        'castrated' => 'castrated',
        'public' => 'public',
        'success_story' => 'successStory',
        'missing' => 'missing',
        'private_adoption' => 'privateAdoption'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'date_of_birth' => 'setDateOfBirth',
        'date_of_admission' => 'setDateOfAdmission',
        'type' => 'setType',
        'breed_one' => 'setBreedOne',
        'breed_two' => 'setBreedTwo',
        'sex' => 'setSex',
        'color' => 'setColor',
        'main_picture_file_url' => 'setMainPictureFileUrl',
        'other_picture_file_urls' => 'setOtherPictureFileUrls',
        'weight' => 'setWeight',
        'height_at_withers' => 'setHeightAtWithers',
        'circumference_of_neck' => 'setCircumferenceOfNeck',
        'length_of_back' => 'setLengthOfBack',
        'circumference_of_chest' => 'setCircumferenceOfChest',
        'is_castrated' => 'setIsCastrated',
        'blood_type' => 'setBloodType',
        'illnesses' => 'setIllnesses',
        'allergies' => 'setAllergies',
        'procedures' => 'setProcedures',
        'chip_number' => 'setChipNumber',
        'is_public' => 'setIsPublic',
        'status' => 'setStatus',
        'was_found' => 'setWasFound',
        'is_success_story' => 'setIsSuccessStory',
        'is_missing' => 'setIsMissing',
        'is_private_adoption' => 'setIsPrivateAdoption',
        'notes' => 'setNotes',
        'description' => 'setDescription',
        'donation_call' => 'setDonationCall',
        'internal_notes' => 'setInternalNotes',
        'date_of_leave' => 'setDateOfLeave',
        'date_of_death' => 'setDateOfDeath',
        'castrated' => 'setCastrated',
        'public' => 'setPublic',
        'success_story' => 'setSuccessStory',
        'missing' => 'setMissing',
        'private_adoption' => 'setPrivateAdoption'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'date_of_birth' => 'getDateOfBirth',
        'date_of_admission' => 'getDateOfAdmission',
        'type' => 'getType',
        'breed_one' => 'getBreedOne',
        'breed_two' => 'getBreedTwo',
        'sex' => 'getSex',
        'color' => 'getColor',
        'main_picture_file_url' => 'getMainPictureFileUrl',
        'other_picture_file_urls' => 'getOtherPictureFileUrls',
        'weight' => 'getWeight',
        'height_at_withers' => 'getHeightAtWithers',
        'circumference_of_neck' => 'getCircumferenceOfNeck',
        'length_of_back' => 'getLengthOfBack',
        'circumference_of_chest' => 'getCircumferenceOfChest',
        'is_castrated' => 'getIsCastrated',
        'blood_type' => 'getBloodType',
        'illnesses' => 'getIllnesses',
        'allergies' => 'getAllergies',
        'procedures' => 'getProcedures',
        'chip_number' => 'getChipNumber',
        'is_public' => 'getIsPublic',
        'status' => 'getStatus',
        'was_found' => 'getWasFound',
        'is_success_story' => 'getIsSuccessStory',
        'is_missing' => 'getIsMissing',
        'is_private_adoption' => 'getIsPrivateAdoption',
        'notes' => 'getNotes',
        'description' => 'getDescription',
        'donation_call' => 'getDonationCall',
        'internal_notes' => 'getInternalNotes',
        'date_of_leave' => 'getDateOfLeave',
        'date_of_death' => 'getDateOfDeath',
        'castrated' => 'getCastrated',
        'public' => 'getPublic',
        'success_story' => 'getSuccessStory',
        'missing' => 'getMissing',
        'private_adoption' => 'getPrivateAdoption'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('date_of_birth', $data ?? [], null);
        $this->setIfExists('date_of_admission', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('breed_one', $data ?? [], null);
        $this->setIfExists('breed_two', $data ?? [], null);
        $this->setIfExists('sex', $data ?? [], null);
        $this->setIfExists('color', $data ?? [], null);
        $this->setIfExists('main_picture_file_url', $data ?? [], null);
        $this->setIfExists('other_picture_file_urls', $data ?? [], null);
        $this->setIfExists('weight', $data ?? [], null);
        $this->setIfExists('height_at_withers', $data ?? [], null);
        $this->setIfExists('circumference_of_neck', $data ?? [], null);
        $this->setIfExists('length_of_back', $data ?? [], null);
        $this->setIfExists('circumference_of_chest', $data ?? [], null);
        $this->setIfExists('is_castrated', $data ?? [], null);
        $this->setIfExists('blood_type', $data ?? [], null);
        $this->setIfExists('illnesses', $data ?? [], null);
        $this->setIfExists('allergies', $data ?? [], null);
        $this->setIfExists('procedures', $data ?? [], null);
        $this->setIfExists('chip_number', $data ?? [], null);
        $this->setIfExists('is_public', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('was_found', $data ?? [], null);
        $this->setIfExists('is_success_story', $data ?? [], null);
        $this->setIfExists('is_missing', $data ?? [], null);
        $this->setIfExists('is_private_adoption', $data ?? [], null);
        $this->setIfExists('notes', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('donation_call', $data ?? [], null);
        $this->setIfExists('internal_notes', $data ?? [], null);
        $this->setIfExists('date_of_leave', $data ?? [], null);
        $this->setIfExists('date_of_death', $data ?? [], null);
        $this->setIfExists('castrated', $data ?? [], null);
        $this->setIfExists('public', $data ?? [], null);
        $this->setIfExists('success_story', $data ?? [], null);
        $this->setIfExists('missing', $data ?? [], null);
        $this->setIfExists('private_adoption', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['date_of_admission'] === null) {
            $invalidProperties[] = "'date_of_admission' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        if ($this->container['breed_one'] === null) {
            $invalidProperties[] = "'breed_one' can't be null";
        }
        if ($this->container['sex'] === null) {
            $invalidProperties[] = "'sex' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets date_of_birth
     *
     * @return \DateTime|null
     */
    public function getDateOfBirth()
    {
        return $this->container['date_of_birth'];
    }

    /**
     * Sets date_of_birth
     *
     * @param \DateTime|null $date_of_birth date_of_birth
     *
     * @return self
     */
    public function setDateOfBirth($date_of_birth)
    {
        if (is_null($date_of_birth)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_birth');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_birth', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_birth'] = $date_of_birth;

        return $this;
    }

    /**
     * Gets date_of_admission
     *
     * @return \DateTime
     */
    public function getDateOfAdmission()
    {
        return $this->container['date_of_admission'];
    }

    /**
     * Sets date_of_admission
     *
     * @param \DateTime $date_of_admission date_of_admission
     *
     * @return self
     */
    public function setDateOfAdmission($date_of_admission)
    {
        if (is_null($date_of_admission)) {
            throw new \InvalidArgumentException('non-nullable date_of_admission cannot be null');
        }
        $this->container['date_of_admission'] = $date_of_admission;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets breed_one
     *
     * @return string
     */
    public function getBreedOne()
    {
        return $this->container['breed_one'];
    }

    /**
     * Sets breed_one
     *
     * @param string $breed_one breed_one
     *
     * @return self
     */
    public function setBreedOne($breed_one)
    {
        if (is_null($breed_one)) {
            throw new \InvalidArgumentException('non-nullable breed_one cannot be null');
        }
        $this->container['breed_one'] = $breed_one;

        return $this;
    }

    /**
     * Gets breed_two
     *
     * @return string|null
     */
    public function getBreedTwo()
    {
        return $this->container['breed_two'];
    }

    /**
     * Sets breed_two
     *
     * @param string|null $breed_two breed_two
     *
     * @return self
     */
    public function setBreedTwo($breed_two)
    {
        if (is_null($breed_two)) {
            array_push($this->openAPINullablesSetToNull, 'breed_two');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('breed_two', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['breed_two'] = $breed_two;

        return $this;
    }

    /**
     * Gets sex
     *
     * @return \OpenAPI\Client\Model\AnimalSex
     */
    public function getSex()
    {
        return $this->container['sex'];
    }

    /**
     * Sets sex
     *
     * @param \OpenAPI\Client\Model\AnimalSex $sex sex
     *
     * @return self
     */
    public function setSex($sex)
    {
        if (is_null($sex)) {
            throw new \InvalidArgumentException('non-nullable sex cannot be null');
        }
        $this->container['sex'] = $sex;

        return $this;
    }

    /**
     * Gets color
     *
     * @return string|null
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string|null $color color
     *
     * @return self
     */
    public function setColor($color)
    {
        if (is_null($color)) {
            array_push($this->openAPINullablesSetToNull, 'color');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('color', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets main_picture_file_url
     *
     * @return string|null
     */
    public function getMainPictureFileUrl()
    {
        return $this->container['main_picture_file_url'];
    }

    /**
     * Sets main_picture_file_url
     *
     * @param string|null $main_picture_file_url main_picture_file_url
     *
     * @return self
     */
    public function setMainPictureFileUrl($main_picture_file_url)
    {
        if (is_null($main_picture_file_url)) {
            array_push($this->openAPINullablesSetToNull, 'main_picture_file_url');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('main_picture_file_url', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['main_picture_file_url'] = $main_picture_file_url;

        return $this;
    }

    /**
     * Gets other_picture_file_urls
     *
     * @return string[]|null
     */
    public function getOtherPictureFileUrls()
    {
        return $this->container['other_picture_file_urls'];
    }

    /**
     * Sets other_picture_file_urls
     *
     * @param string[]|null $other_picture_file_urls other_picture_file_urls
     *
     * @return self
     */
    public function setOtherPictureFileUrls($other_picture_file_urls)
    {
        if (is_null($other_picture_file_urls)) {
            array_push($this->openAPINullablesSetToNull, 'other_picture_file_urls');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_picture_file_urls', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_picture_file_urls'] = $other_picture_file_urls;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return float|null
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param float|null $weight weight
     *
     * @return self
     */
    public function setWeight($weight)
    {
        if (is_null($weight)) {
            array_push($this->openAPINullablesSetToNull, 'weight');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('weight', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets height_at_withers
     *
     * @return int|null
     */
    public function getHeightAtWithers()
    {
        return $this->container['height_at_withers'];
    }

    /**
     * Sets height_at_withers
     *
     * @param int|null $height_at_withers height_at_withers
     *
     * @return self
     */
    public function setHeightAtWithers($height_at_withers)
    {
        if (is_null($height_at_withers)) {
            array_push($this->openAPINullablesSetToNull, 'height_at_withers');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('height_at_withers', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['height_at_withers'] = $height_at_withers;

        return $this;
    }

    /**
     * Gets circumference_of_neck
     *
     * @return int|null
     */
    public function getCircumferenceOfNeck()
    {
        return $this->container['circumference_of_neck'];
    }

    /**
     * Sets circumference_of_neck
     *
     * @param int|null $circumference_of_neck circumference_of_neck
     *
     * @return self
     */
    public function setCircumferenceOfNeck($circumference_of_neck)
    {
        if (is_null($circumference_of_neck)) {
            array_push($this->openAPINullablesSetToNull, 'circumference_of_neck');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('circumference_of_neck', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['circumference_of_neck'] = $circumference_of_neck;

        return $this;
    }

    /**
     * Gets length_of_back
     *
     * @return int|null
     */
    public function getLengthOfBack()
    {
        return $this->container['length_of_back'];
    }

    /**
     * Sets length_of_back
     *
     * @param int|null $length_of_back length_of_back
     *
     * @return self
     */
    public function setLengthOfBack($length_of_back)
    {
        if (is_null($length_of_back)) {
            array_push($this->openAPINullablesSetToNull, 'length_of_back');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('length_of_back', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['length_of_back'] = $length_of_back;

        return $this;
    }

    /**
     * Gets circumference_of_chest
     *
     * @return int|null
     */
    public function getCircumferenceOfChest()
    {
        return $this->container['circumference_of_chest'];
    }

    /**
     * Sets circumference_of_chest
     *
     * @param int|null $circumference_of_chest circumference_of_chest
     *
     * @return self
     */
    public function setCircumferenceOfChest($circumference_of_chest)
    {
        if (is_null($circumference_of_chest)) {
            array_push($this->openAPINullablesSetToNull, 'circumference_of_chest');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('circumference_of_chest', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['circumference_of_chest'] = $circumference_of_chest;

        return $this;
    }

    /**
     * Gets is_castrated
     *
     * @return bool|null
     */
    public function getIsCastrated()
    {
        return $this->container['is_castrated'];
    }

    /**
     * Sets is_castrated
     *
     * @param bool|null $is_castrated is_castrated
     *
     * @return self
     */
    public function setIsCastrated($is_castrated)
    {
        if (is_null($is_castrated)) {
            array_push($this->openAPINullablesSetToNull, 'is_castrated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('is_castrated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['is_castrated'] = $is_castrated;

        return $this;
    }

    /**
     * Gets blood_type
     *
     * @return string|null
     */
    public function getBloodType()
    {
        return $this->container['blood_type'];
    }

    /**
     * Sets blood_type
     *
     * @param string|null $blood_type blood_type
     *
     * @return self
     */
    public function setBloodType($blood_type)
    {
        if (is_null($blood_type)) {
            array_push($this->openAPINullablesSetToNull, 'blood_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('blood_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['blood_type'] = $blood_type;

        return $this;
    }

    /**
     * Gets illnesses
     *
     * @return string[]|null
     */
    public function getIllnesses()
    {
        return $this->container['illnesses'];
    }

    /**
     * Sets illnesses
     *
     * @param string[]|null $illnesses illnesses
     *
     * @return self
     */
    public function setIllnesses($illnesses)
    {
        if (is_null($illnesses)) {
            array_push($this->openAPINullablesSetToNull, 'illnesses');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('illnesses', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['illnesses'] = $illnesses;

        return $this;
    }

    /**
     * Gets allergies
     *
     * @return string[]|null
     */
    public function getAllergies()
    {
        return $this->container['allergies'];
    }

    /**
     * Sets allergies
     *
     * @param string[]|null $allergies allergies
     *
     * @return self
     */
    public function setAllergies($allergies)
    {
        if (is_null($allergies)) {
            array_push($this->openAPINullablesSetToNull, 'allergies');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('allergies', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['allergies'] = $allergies;

        return $this;
    }

    /**
     * Gets procedures
     *
     * @return \OpenAPI\Client\Model\AnimalProcedure[]|null
     */
    public function getProcedures()
    {
        return $this->container['procedures'];
    }

    /**
     * Sets procedures
     *
     * @param \OpenAPI\Client\Model\AnimalProcedure[]|null $procedures procedures
     *
     * @return self
     */
    public function setProcedures($procedures)
    {
        if (is_null($procedures)) {
            array_push($this->openAPINullablesSetToNull, 'procedures');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('procedures', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['procedures'] = $procedures;

        return $this;
    }

    /**
     * Gets chip_number
     *
     * @return string|null
     */
    public function getChipNumber()
    {
        return $this->container['chip_number'];
    }

    /**
     * Sets chip_number
     *
     * @param string|null $chip_number chip_number
     *
     * @return self
     */
    public function setChipNumber($chip_number)
    {
        if (is_null($chip_number)) {
            array_push($this->openAPINullablesSetToNull, 'chip_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('chip_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['chip_number'] = $chip_number;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool|null
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool|null $is_public is_public
     *
     * @return self
     */
    public function setIsPublic($is_public)
    {
        if (is_null($is_public)) {
            throw new \InvalidArgumentException('non-nullable is_public cannot be null');
        }
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\AnimalStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\AnimalStatus $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets was_found
     *
     * @return bool|null
     */
    public function getWasFound()
    {
        return $this->container['was_found'];
    }

    /**
     * Sets was_found
     *
     * @param bool|null $was_found was_found
     *
     * @return self
     */
    public function setWasFound($was_found)
    {
        if (is_null($was_found)) {
            array_push($this->openAPINullablesSetToNull, 'was_found');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('was_found', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['was_found'] = $was_found;

        return $this;
    }

    /**
     * Gets is_success_story
     *
     * @return bool|null
     */
    public function getIsSuccessStory()
    {
        return $this->container['is_success_story'];
    }

    /**
     * Sets is_success_story
     *
     * @param bool|null $is_success_story is_success_story
     *
     * @return self
     */
    public function setIsSuccessStory($is_success_story)
    {
        if (is_null($is_success_story)) {
            throw new \InvalidArgumentException('non-nullable is_success_story cannot be null');
        }
        $this->container['is_success_story'] = $is_success_story;

        return $this;
    }

    /**
     * Gets is_missing
     *
     * @return bool|null
     */
    public function getIsMissing()
    {
        return $this->container['is_missing'];
    }

    /**
     * Sets is_missing
     *
     * @param bool|null $is_missing is_missing
     *
     * @return self
     */
    public function setIsMissing($is_missing)
    {
        if (is_null($is_missing)) {
            throw new \InvalidArgumentException('non-nullable is_missing cannot be null');
        }
        $this->container['is_missing'] = $is_missing;

        return $this;
    }

    /**
     * Gets is_private_adoption
     *
     * @return bool|null
     */
    public function getIsPrivateAdoption()
    {
        return $this->container['is_private_adoption'];
    }

    /**
     * Sets is_private_adoption
     *
     * @param bool|null $is_private_adoption is_private_adoption
     *
     * @return self
     */
    public function setIsPrivateAdoption($is_private_adoption)
    {
        if (is_null($is_private_adoption)) {
            throw new \InvalidArgumentException('non-nullable is_private_adoption cannot be null');
        }
        $this->container['is_private_adoption'] = $is_private_adoption;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string|null
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string|null $notes notes
     *
     * @return self
     */
    public function setNotes($notes)
    {
        if (is_null($notes)) {
            array_push($this->openAPINullablesSetToNull, 'notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets donation_call
     *
     * @return bool|null
     */
    public function getDonationCall()
    {
        return $this->container['donation_call'];
    }

    /**
     * Sets donation_call
     *
     * @param bool|null $donation_call donation_call
     *
     * @return self
     */
    public function setDonationCall($donation_call)
    {
        if (is_null($donation_call)) {
            throw new \InvalidArgumentException('non-nullable donation_call cannot be null');
        }
        $this->container['donation_call'] = $donation_call;

        return $this;
    }

    /**
     * Gets internal_notes
     *
     * @return string|null
     */
    public function getInternalNotes()
    {
        return $this->container['internal_notes'];
    }

    /**
     * Sets internal_notes
     *
     * @param string|null $internal_notes internal_notes
     *
     * @return self
     */
    public function setInternalNotes($internal_notes)
    {
        if (is_null($internal_notes)) {
            array_push($this->openAPINullablesSetToNull, 'internal_notes');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('internal_notes', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['internal_notes'] = $internal_notes;

        return $this;
    }

    /**
     * Gets date_of_leave
     *
     * @return \DateTime|null
     */
    public function getDateOfLeave()
    {
        return $this->container['date_of_leave'];
    }

    /**
     * Sets date_of_leave
     *
     * @param \DateTime|null $date_of_leave date_of_leave
     *
     * @return self
     */
    public function setDateOfLeave($date_of_leave)
    {
        if (is_null($date_of_leave)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_leave');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_leave', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_leave'] = $date_of_leave;

        return $this;
    }

    /**
     * Gets date_of_death
     *
     * @return \DateTime|null
     */
    public function getDateOfDeath()
    {
        return $this->container['date_of_death'];
    }

    /**
     * Sets date_of_death
     *
     * @param \DateTime|null $date_of_death date_of_death
     *
     * @return self
     */
    public function setDateOfDeath($date_of_death)
    {
        if (is_null($date_of_death)) {
            array_push($this->openAPINullablesSetToNull, 'date_of_death');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('date_of_death', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['date_of_death'] = $date_of_death;

        return $this;
    }

    /**
     * Gets castrated
     *
     * @return bool|null
     */
    public function getCastrated()
    {
        return $this->container['castrated'];
    }

    /**
     * Sets castrated
     *
     * @param bool|null $castrated castrated
     *
     * @return self
     */
    public function setCastrated($castrated)
    {
        if (is_null($castrated)) {
            array_push($this->openAPINullablesSetToNull, 'castrated');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('castrated', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['castrated'] = $castrated;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool|null
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool|null $public public
     *
     * @return self
     */
    public function setPublic($public)
    {
        if (is_null($public)) {
            throw new \InvalidArgumentException('non-nullable public cannot be null');
        }
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets success_story
     *
     * @return bool|null
     */
    public function getSuccessStory()
    {
        return $this->container['success_story'];
    }

    /**
     * Sets success_story
     *
     * @param bool|null $success_story success_story
     *
     * @return self
     */
    public function setSuccessStory($success_story)
    {
        if (is_null($success_story)) {
            throw new \InvalidArgumentException('non-nullable success_story cannot be null');
        }
        $this->container['success_story'] = $success_story;

        return $this;
    }

    /**
     * Gets missing
     *
     * @return bool|null
     */
    public function getMissing()
    {
        return $this->container['missing'];
    }

    /**
     * Sets missing
     *
     * @param bool|null $missing missing
     *
     * @return self
     */
    public function setMissing($missing)
    {
        if (is_null($missing)) {
            throw new \InvalidArgumentException('non-nullable missing cannot be null');
        }
        $this->container['missing'] = $missing;

        return $this;
    }

    /**
     * Gets private_adoption
     *
     * @return bool|null
     */
    public function getPrivateAdoption()
    {
        return $this->container['private_adoption'];
    }

    /**
     * Sets private_adoption
     *
     * @param bool|null $private_adoption private_adoption
     *
     * @return self
     */
    public function setPrivateAdoption($private_adoption)
    {
        if (is_null($private_adoption)) {
            throw new \InvalidArgumentException('non-nullable private_adoption cannot be null');
        }
        $this->container['private_adoption'] = $private_adoption;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


