---
openapi: 3.0.3
info:
  title: shelterapp-backend API
  version: "1.0"
servers:
- url: http://localhost:8080
  description: Auto generated value
- url: http://0.0.0.0:8080
  description: Auto generated value
paths:
  /animal-events:
    get:
      tags:
      - Animal Event Resource
      parameters:
      - name: id
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: page
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: pageSize
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalEvent'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    put:
      tags:
      - Animal Event Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalEvent'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalEvent'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    post:
      tags:
      - Animal Event Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalEvent'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalEvent'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Animal Event Resource
      parameters:
      - name: id
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "204":
          description: No Content
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /animal-procedures:
    get:
      tags:
      - Animal Procedure Resource
      parameters:
      - name: animalId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: page
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: pageSize
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AnimalProcedure'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    put:
      tags:
      - Animal Procedure Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalProcedure'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalProcedure'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    post:
      tags:
      - Animal Procedure Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnimalProcedure'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnimalProcedure'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Animal Procedure Resource
      parameters:
      - name: id
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "204":
          description: No Content
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /animals:
    get:
      tags:
      - Animal Resource
      parameters:
      - name: bloodTypeContains
        in: query
        schema:
          type: string
          nullable: true
      - name: breedOneContains
        in: query
        schema:
          type: string
          nullable: true
      - name: breedTwoContains
        in: query
        schema:
          type: string
          nullable: true
      - name: chipNumberContains
        in: query
        schema:
          type: string
          nullable: true
      - name: circumferenceOfChestAbove
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: circumferenceOfChestBelow
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: circumferenceOfNeckAbove
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: circumferenceOfNeckBelow
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: colorContains
        in: query
        schema:
          type: string
          nullable: true
      - name: createdAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: createdBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: dateOfAdmissionAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: dateOfAdmissionBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: dateOfBirthAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: dateOfBirthBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: dateOfDeathAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: dateOfDeathBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: dateOfLeaveAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: dateOfLeaveBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          - nullable: true
      - name: hasDonationCall
        in: query
        schema:
          type: boolean
          nullable: true
      - name: heightAtWithersAbove
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: heightAtWithersBelow
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: id
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/UUID'
          - nullable: true
      - name: isCastrated
        in: query
        schema:
          type: boolean
          nullable: true
      - name: isMissing
        in: query
        schema:
          type: boolean
          nullable: true
      - name: isPrivateAdoption
        in: query
        schema:
          type: boolean
          nullable: true
      - name: isPublic
        in: query
        schema:
          type: boolean
          nullable: true
      - name: isSuccessStory
        in: query
        schema:
          type: boolean
          nullable: true
      - name: lengthOfBackAbove
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: lengthOfBackBelow
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: nameContains
        in: query
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: pageSize
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: sex
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/AnimalSex'
          - nullable: true
      - name: status
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/AnimalStatus'
          - nullable: true
      - name: typeContains
        in: query
        schema:
          type: string
          nullable: true
      - name: updatedAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: updatedBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: wasFound
        in: query
        schema:
          type: boolean
          nullable: true
      - name: weightAbove
        in: query
        schema:
          format: float
          type: number
          nullable: true
      - name: weightBelow
        in: query
        schema:
          format: float
          type: number
          nullable: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Animal'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    put:
      tags:
      - Animal Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Animal'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    post:
      tags:
      - Animal Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Animal'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Animal'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Animal Resource
      parameters:
      - name: id
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "204":
          description: No Content
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /auth/login:
    post:
      tags:
      - Auth Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
  /auth/login/anonymous:
    get:
      tags:
      - Auth Resource
      parameters:
      - name: tenantId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
  /auth/logout:
    get:
      tags:
      - Auth Resource
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /auth/logoutAll:
    get:
      tags:
      - Auth Resource
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /auth/refresh:
    get:
      tags:
      - Auth Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RefreshResponse'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /auth/token/validate:
    get:
      tags:
      - Auth Resource
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: boolean
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /tenants:
    get:
      tags:
      - Tenant Resource
      parameters:
      - name: nameContains
        in: query
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: pageSize
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tenant'
    put:
      tags:
      - Tenant Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    post:
      tags:
      - Tenant Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tenant'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    delete:
      tags:
      - Tenant Resource
      parameters:
      - name: id
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "204":
          description: No Content
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /users:
    get:
      tags:
      - User Resource
      parameters:
      - name: createdAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: createdBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: emailContains
        in: query
        schema:
          type: string
          nullable: true
      - name: fistNameContains
        in: query
        schema:
          type: string
          nullable: true
      - name: idIs
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/UUID'
          - nullable: true
      - name: lastLoginAfter
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: lastLoginBefore
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          - nullable: true
      - name: lastNameContains
        in: query
        schema:
          type: string
          nullable: true
      - name: page
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: pageSize
        in: query
        schema:
          format: int32
          type: integer
          nullable: true
      - name: roleIs
        in: query
        schema:
          allOf:
          - $ref: '#/components/schemas/UserRole'
          - nullable: true
      - name: usernameContains
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    put:
      tags:
      - User Resource
      parameters:
      - name: updatePassword
        in: query
        schema:
          type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    post:
      tags:
      - User Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
    delete:
      tags:
      - User Resource
      parameters:
      - name: id
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: OK
          content:
            application/json: {}
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /users/email/change:
    post:
      tags:
      - User Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEmailChangeRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /users/email/change/confirm:
    get:
      tags:
      - User Resource
      parameters:
      - name: token
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /users/emailTaken:
    get:
      tags:
      - User Resource
      parameters:
      - name: email
        in: query
        required: true
        schema:
          type: string
      - name: tenantId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
  /users/password/change:
    post:
      tags:
      - User Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordChangeRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /users/password/reset:
    get:
      tags:
      - User Resource
      parameters:
      - name: email
        in: query
        schema:
          type: string
          nullable: true
      - name: username
        in: query
        schema:
          type: string
          nullable: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /users/password/reset/{id}:
    post:
      tags:
      - User Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPasswordResetConfirmationRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
  /users/register:
    post:
      tags:
      - User Resource
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegistrationRequest'
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Unit'
        "403":
          description: Not Allowed
        "401":
          description: Not Authorized
      security:
      - SecurityScheme: []
  /users/register/{id}:
    post:
      tags:
      - User Resource
      parameters:
      - name: id
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserFinishRegistrationRequest'
      responses:
        "201":
          description: Created
  /users/usernameTaken:
    get:
      tags:
      - User Resource
      parameters:
      - name: tenantId
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/UUID'
      - name: username
        in: query
        required: true
        schema:
          minLength: 1
          type: string
      responses:
        "200":
          description: OK
          content:
            text/plain:
              schema:
                type: boolean
components:
  schemas:
    Animal:
      required:
      - id
      - tenantId
      - name
      - dateOfAdmission
      - type
      - breedOne
      - sex
      - status
      - createdAt
      - updatedAt
      - notices
      - supporters
      type: object
      properties:
        id:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        tenantId:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        name:
          type: string
        dateOfBirth:
          type: string
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          nullable: true
        dateOfAdmission:
          $ref: '#/components/schemas/LocalDate'
        type:
          type: string
        breedOne:
          type: string
        breedTwo:
          type: string
          nullable: true
        sex:
          $ref: '#/components/schemas/AnimalSex'
        color:
          type: string
          nullable: true
        mainPictureFileUrl:
          type: string
          nullable: true
        otherPictureFileUrls:
          type: array
          items:
            type: string
          nullable: true
        weight:
          format: float
          type: number
          nullable: true
        heightAtWithers:
          format: int32
          type: integer
          nullable: true
        circumferenceOfNeck:
          format: int32
          type: integer
          nullable: true
        lengthOfBack:
          format: int32
          type: integer
          nullable: true
        circumferenceOfChest:
          format: int32
          type: integer
          nullable: true
        castrated:
          type: boolean
          nullable: true
        bloodType:
          type: string
          nullable: true
        illnesses:
          type: array
          items:
            type: string
          nullable: true
        allergies:
          type: array
          items:
            type: string
          nullable: true
        chipNumber:
          type: string
          nullable: true
        public:
          type: boolean
        status:
          $ref: '#/components/schemas/AnimalStatus'
        wasFound:
          type: boolean
        successStory:
          type: boolean
        missing:
          type: boolean
        privateAdoption:
          type: boolean
        notes:
          type: string
          nullable: true
        description:
          type: string
          nullable: true
        donationCall:
          type: boolean
        internalNotes:
          type: string
          nullable: true
        dateOfLeave:
          type: string
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          nullable: true
        dateOfDeath:
          type: string
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          nullable: true
        createdAt:
          $ref: '#/components/schemas/LocalDateTime'
        updatedAt:
          $ref: '#/components/schemas/LocalDateTime'
        notices:
          type: string
        supporters:
          type: string
    AnimalEvent:
      required:
      - id
      - tenantId
      - animalId
      - title
      type: object
      properties:
        id:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        tenantId:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        animalId:
          $ref: '#/components/schemas/UUID'
        date:
          type: string
          allOf:
          - $ref: '#/components/schemas/LocalDate'
          nullable: true
        tags:
          type: array
          items:
            type: string
          nullable: true
        pictureFileUrls:
          type: array
          items:
            type: string
          nullable: true
        title:
          type: string
        comment:
          type: string
          nullable: true
    AnimalProcedure:
      required:
      - id
      - tenantId
      - title
      - date
      - animalId
      type: object
      properties:
        id:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        tenantId:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        title:
          pattern: \S
          type: string
        date:
          $ref: '#/components/schemas/LocalDate'
        animalId:
          $ref: '#/components/schemas/UUID'
    AnimalSex:
      enum:
      - MALE
      - FEMALE
      - DIV
      - GROUP
      type: string
    AnimalStatus:
      enum:
      - NEW
      - SEARCHING
      - REQUEST_STOP
      - EMERGENCY
      - RESERVED
      - ADOPTED
      - FINAL_CARE
      - COURT_OF_GRACE
      - DECEASED
      type: string
    LocalDate:
      format: date
      type: string
      example: 2022-03-10
    LocalDateTime:
      format: date-time
      type: string
      example: 2022-03-10T12:15:50
    LoginRequest:
      required:
      - password
      type: object
      properties:
        username:
          type: string
          nullable: true
        password:
          type: string
        permanent:
          type: boolean
    LoginResponse:
      required:
      - refreshToken
      - accessToken
      type: object
      properties:
        refreshToken:
          type: string
        accessToken:
          type: string
    RefreshResponse:
      required:
      - accessToken
      type: object
      properties:
        accessToken:
          type: string
    Tenant:
      required:
      - id
      - name
      - ownerId
      - baseUrl
      type: object
      properties:
        id:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        name:
          type: string
        ownerId:
          $ref: '#/components/schemas/UUID'
        baseUrl:
          type: string
    UUID:
      format: uuid
      pattern: "[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{4}-[a-fA-F0-9]{12}"
      type: string
    Unit:
      type: object
    User:
      required:
      - id
      - tenantId
      - username
      - email
      - password
      - createdAt
      - role
      type: object
      properties:
        id:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        tenantId:
          type: string
          allOf:
          - $ref: '#/components/schemas/UUID'
          readOnly: true
        username:
          minLength: 1
          type: string
        email:
          type: string
        password:
          minLength: 1
          type: string
          writeOnly: true
        createdAt:
          type: string
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          readOnly: true
        lastLogin:
          type: string
          allOf:
          - $ref: '#/components/schemas/LocalDateTime'
          readOnly: true
          nullable: true
        firstName:
          type: string
          nullable: true
        lastName:
          type: string
          nullable: true
        role:
          $ref: '#/components/schemas/UserRole'
    UserEmailChangeRequest:
      required:
      - email
      - password
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    UserFinishRegistrationRequest:
      required:
      - password
      - username
      type: object
      properties:
        password:
          type: string
        username:
          type: string
    UserPasswordChangeRequest:
      required:
      - oldPassword
      - newPassword
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
    UserPasswordResetConfirmationRequest:
      required:
      - newPassword
      type: object
      properties:
        newPassword:
          type: string
    UserRegistrationRequest:
      required:
      - email
      - userRole
      type: object
      properties:
        email:
          type: string
        userRole:
          $ref: '#/components/schemas/UserRole'
    UserRole:
      enum:
      - USER
      - CARETAKER
      - ADMIN
      - SUPER_ADMIN
      - SUPER_DUPER_ADMIN
      type: string
  securitySchemes:
    SecurityScheme:
      type: http
      description: Authentication
      scheme: bearer
      bearerFormat: JWT
